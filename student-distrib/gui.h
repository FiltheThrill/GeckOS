#ifndef _GUI_H
#define _GUI_H

#define VMEM_START        0xB8000
#define KB64              0xFA00
#define VID_MEM_SIZE       131072
#define MODE_X_MEM_SIZE     65536
#define NUM_SEQUENCER_REGS      5
#define NUM_CRTC_REGS          25
#define NUM_GRAPHICS_REGS       9
#define NUM_ATTR_REGS          22

//macros
/* macro used to write a byte to a port */
#define OUTB(port,val)                                                  \
do {                                                                    \
    asm volatile ("                                                     \
        outb %b1,(%w0)                                                  \
    " : /* no outputs */                                                \
      : "d" ((port)), "a" ((val))                                       \
      : "memory", "cc");                                                \
} while (0)

/* macro used to write two bytes to two consecutive ports */
#define OUTW(port,val)                                                  \
do {                                                                    \
    asm volatile ("                                                     \
        outw %w1,(%w0)                                                  \
    " : /* no outputs */                                                \
      : "d" ((port)), "a" ((val))                                       \
      : "memory", "cc");                                                \
} while (0)

/*
 * macro used to write an array of two-byte values to two consecutive ports
 */
#define REP_OUTSW(port,source,count)                                    \
do {                                                                    \
    asm volatile ("                                                     \
     1: movw 0(%1),%%ax                                                ;\
	outw %%ax,(%w2)                                                ;\
	addl $2,%1                                                     ;\
	decl %0                                                        ;\
	jne 1b                                                          \
    " : /* no outputs */                                                \
      : "c" ((count)), "S" ((source)), "d" ((port))                     \
      : "eax", "memory", "cc");                                         \
} while (0)

/*
 * macro used to write an array of one-byte values to two consecutive ports
 */
#define REP_OUTSB(port,source,count)                                    \
do {                                                                    \
    asm volatile ("                                                     \
     1: movb 0(%1),%%al                                                ;\
	outb %%al,(%w2)                                                ;\
	incl %1                                                        ;\
	decl %0                                                        ;\
	jne 1b                                                          \
    " : /* no outputs */                                                \
      : "c" ((count)), "S" ((source)), "d" ((port))                     \
      : "eax", "memory", "cc");                                         \
} while (0)

//arrays
static unsigned short mode_13_seq[NUM_SEQUENCER_REGS] = {
    0x0100, 0x2101, 0x0F02, 0x0003, 0x0E04
};
static unsigned short mode_13_CRTC[NUM_CRTC_REGS] = {
    0x5F00, 0x4F01, 0x5002, 0x8203, 0x5404, 0x8005, 0xBF06, 0x1F07,
    0x0008, 0x0809, 0x0D0A, 0x0E0B, 0x000C, 0x000D, 0x000E, 0x000F,
    0x9C10, 0x8E11, 0x8F12, 0x2813, 0x4014, 0x9615, 0xB916, 0xA317,
    0x6018
};
static unsigned char mode_13_attr[NUM_ATTR_REGS * 2] = {
    0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03,
    0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07,
    0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B,
    0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F,
    0x10, 0x41, 0x11, 0x00, 0x12, 0x0F, 0x13, 0x00,
    0x14, 0x00, 0x15, 0x00
};
static unsigned short mode_13_graphics[NUM_GRAPHICS_REGS] = {
    0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x4005, 0x0506, 0x0F07,
    0xFF08
};
static unsigned short text_seq[NUM_SEQUENCER_REGS] = {
    0x0100, 0x2001, 0x0302, 0x0003, 0x0204
};
static unsigned short text_CRTC[NUM_CRTC_REGS] = {
    0x5F00, 0x4F01, 0x5002, 0x8203, 0x5504, 0x8105, 0xBF06, 0x1F07,
    0x0008, 0x4F09, 0x0D0A, 0x0E0B, 0x000C, 0x000D, 0x000E, 0x000F,
    0x9C10, 0x8E11, 0x8F12, 0x2813, 0x1F14, 0x9615, 0xB916, 0xA317,
    0xFF18
};
static unsigned char text_attr[NUM_ATTR_REGS * 2] = {
    0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03,
    0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07,
    0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B,
    0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F,
    0x10, 0x0C, 0x11, 0x00, 0x12, 0x0F, 0x13, 0x08,
    0x14, 0x00, 0x15, 0x00
};
static unsigned short text_graphics[NUM_GRAPHICS_REGS] = {
    0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x1005, 0x0E06, 0x0007,
    0xFF08
};
static unsigned char palette_RGB[64][3] = {
    {0x00, 0x00, 0x00}, {0x00, 0x00, 0x15},
    {0x00, 0x00, 0x2A}, {0x00, 0x00, 0x3F},
    {0x00, 0x15, 0x00}, {0x00, 0x15, 0x15},
    {0x00, 0x15, 0x2A}, {0x00, 0x15, 0x3F},
    {0x00, 0x2A, 0x00}, {0x00, 0x2A, 0x15},
    {0x00, 0x2A, 0x2A}, {0x00, 0x2A, 0x3F},
    {0x00, 0x3F, 0x00}, {0x00, 0x3F, 0x15},
    {0x00, 0x3F, 0x2A}, {0x00, 0x3F, 0x3F},
    {0x15, 0x00, 0x00}, {0x15, 0x00, 0x15},
    {0x15, 0x00, 0x2A}, {0x15, 0x00, 0x3F},
    {0x15, 0x15, 0x00}, {0x15, 0x15, 0x15},
    {0x15, 0x15, 0x2A}, {0x15, 0x15, 0x3F},
    {0x15, 0x2A, 0x00}, {0x15, 0x2A, 0x15},
    {0x15, 0x2A, 0x2A}, {0x15, 0x2A, 0x3F},
    {0x15, 0x3F, 0x00}, {0x15, 0x3F, 0x15},
    {0x15, 0x3F, 0x2A}, {0x15, 0x3F, 0x3F},
    {0x2A, 0x00, 0x00}, {0x2A, 0x00, 0x15},
    {0x2A, 0x00, 0x2A}, {0x2A, 0x00, 0x3F},
    {0x2A, 0x15, 0x00}, {0x2A, 0x15, 0x15},
    {0x2A, 0x15, 0x2A}, {0x2A, 0x15, 0x3F},
    {0x2A, 0x2A, 0x00}, {0x2A, 0x2A, 0x15},
    {0x2A, 0x2A, 0x2A}, {0x2A, 0x2A, 0x3F},
    {0x2A, 0x3F, 0x00}, {0x2A, 0x3F, 0x15},
    {0x2A, 0x3F, 0x2A}, {0x2A, 0x3F, 0x3F},
    {0x3F, 0x00, 0x00}, {0x3F, 0x00, 0x15},
    {0x3F, 0x00, 0x2A}, {0x3F, 0x00, 0x3F},
    {0x3F, 0x15, 0x00}, {0x3F, 0x15, 0x15},
    {0x3F, 0x15, 0x2A}, {0x3F, 0x15, 0x3F},
    {0x3F, 0x2A, 0x00}, {0x3F, 0x2A, 0x15},
    {0x3F, 0x2A, 0x2A}, {0x3F, 0x2A, 0x3F},
    {0x3F, 0x3F, 0x00}, {0x3F, 0x3F, 0x15},
    {0x3F, 0x3F, 0x2A}, {0x3F, 0x3F, 0x3F}
};
//funcs
extern void vga_mode13();
extern void vga_text();
void vga_fill();
//vga helpers
void VGA_blank (int blank_bit);
void set_seq_regs_and_reset (unsigned short table[NUM_SEQUENCER_REGS],unsigned char val);
void set_CRTC_registers (unsigned short table[NUM_CRTC_REGS]);
void set_attr_registers (unsigned char table[NUM_ATTR_REGS * 2]);
void set_graphics_registers (unsigned short table[NUM_GRAPHICS_REGS]);
void fill_palette (int type);

#endif
